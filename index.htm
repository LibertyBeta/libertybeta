<html>
    <head>
      <!--Import Google Icon Font-->
      <link href="http://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
      <!-- Compiled and minified CSS -->
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.1/css/materialize.min.css">
      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
      <!--Import jQuery before materialize.js-->
      <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
      <!-- Compiled and minified JavaScript -->
      <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.1/js/materialize.min.js"></script>

      <script>
      $(document).ready(function(){
        $('.scrollspy').scrollSpy();
      });
      </script>
      <!-- This is our loca style sheet.  -->
      <link rel="stylesheet" href="css/style.css">
      <script src="js/scripts.js"></script>
      <!--Let browser know website is optimized for mobile-->
      <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
      <meta name="theme-color" content="#2196F3">
      <!-- Windows Phone -->
      <meta name="msapplication-navbutton-color" content="#2196F3">
      <!-- iOS Safari -->
      <meta name="apple-mobile-web-app-status-bar-style" content="#2196F3">
      <title> Rainer Paskiewicz, Developer, Writer, and Occasional Blacksmith</title>
    </head>
    <nav class="blue hide-on-med-and-up fixed">
        <h4 class="imaged">Rainer Paskiewicz </h4>
    </nav>
    <body>

      <main>
        <div class="waterfall blue white-text hide-on-med-and-up">
          <h5>Writer</h5>
          <h5>Developer</h5>
          <h5>Occassional Blacksmith</h5>
          <p>Hi. Hello. Welcome. Greetings. Etc, etc, etc, etc. Welcome to my little resume webpage. Its not super long, or overly technical. But it does give you a quick glimpse into who I am professionally,  as well as the kind of work I do. </p>
        </div>
        <!-- Hey, you looked at my source code, good job you! First off, if you've noticed anything wrong with this site, please feel free to email me at Rainer.Paskiewicz@gmail.com. I'll get right on fixing it and you'll get a heartfelt thankyou. This site is hosted by GitHubs amazing GitHub Pages feature. If you want to know more, you can find out at the like right here:  https://pages.github.com/ The CSS/JS framework you see litterting the site with style is known at Materializecss. Its a great library that gives you Google's Material Design without a lot of overhead or having to use Polymer(Which isn't really done yet.). You can find out more about them here: http://materializecss.com/ Finally, a BIG thank you to the guys and gals over at Atom.io. Not because they helped in any way, but because their editor helps me every day get my work done faster.  -->
        <div class="container">
          <div class="row">
            <div class="col hide-on-small-only m3 l2">
                <div class="toc-wrapper pinned">
                  <img class="responsive-img circle" src="images/logo.svg">
                  <ul class="section table-of-contents card">
                    <li><a href="#introduction">Introduction</a></li>
                    <li><a href="#experience">Experience</a></li>
                    <li><a href="#languages">Languages</a></li>
                    <li><a href="#frameworks">Frameworks</a></li>
                    <li><a href="#education">Education</a></li>
                  </ul>
                </div>
            </div>

            <div class="col s12 offset-m3 m9 offset-l2 l10">
              <div id="introduction" class="section scrollspy hide-on-small-only">
                <!-- <div class="row "> -->
                    <!-- <div class="col s12 m1"> <img class="responsive-img" src="images/logo.svg"></div> -->
                    <!-- <div class="col s12 m10"> -->
                        <h1 class="imaged ">Rainer Paskiewicz </h1>
                    <!-- </div> -->
                <!-- </div> -->
                <h6> Or why I put this together in a few hours</h6>
                <p>Hi. Hello. Welcome. Greetings. Etc, etc, etc, etc. Welcome to my little resume webpage. Its not super long, or overly technical. But it does give you a quick glimpse into who I am professionally,  as well as the kind of work I do. </p>
              </div>

              <div id="experience" class="section scrollspy">

                <h5 class="card-panel blue darken-1 white-text"> Employment History</h5>
                <ul>
                  <li>
                    <h5>Developer, DCPHP L.L.C</h5>
                    <div class="chip">
                        2011 -> Dec. 2015
                    </div>
                    <p>While working at DCPHP I have grown from basic data entry and QA member to a Lead Developer with all the responsibilities and the skills the position entails. The challenge of meeting the needs of a diverse and multifaceted client base has driven me to broaden not only my technical skills, but my understanding of client's needs and wants.</p>
                    <strong>Accomplishments</strong>

                    <ul class="collection">
                        <li class="collection-item">Shepherded the company's in house software through several major language and library updates.</li>
                        <li class="collection-item">Expanded company's development base from a purely LAMP structure to include more modern development languages and paradigms.</li>
                        <li class="collection-item">Introduced, developed, and deployed a client license control library for use in company projects.</li>
                        <li class="collection-item">Expanded my personal understanding of development languages to include those still under development(GO, etc).</li>
                    </ul>


                    <strong>Responsibilities</strong>
                    <ul class="collection">
                        <li class="collection-item">Development and design of Applications to fit client's needs, using various combined development tools.</li>
                        <li class="collection-item">Administration of Linux and Windows based servers.</li>
                        <li class="collection-item">Management of various code revision solutions(Git,Subversion) on multiple platforms.</li>
                        <li class="collection-item">Deploy and manage LAMP environments to both cloud based and local hardware.</li>
                        <li class="collection-item">Database Structure design, including embed business logic.</li>
                        <li class="collection-item">API design and Management</li>
                    </ul>
                  </li>
                </ul>
              </div>

              <div id="languages" class="section scrollspy betterCarded">
                <h5 class="card-panel blue darken-1 white-text"> Languages </h5>
                <p> In my time as a developer I've picked up a wide variety of languages. Sometimes it seems as if each new project I'm assigned to requires learning a new language or design paradigm. Bellow is a short list of the languages I've come across, and what I think about them. </p>
                <ul class="collapsible" data-collapsible="accordion">
                  <li>
                    <div class="collapsible-header">PHP</div>
                    <div class="collapsible-body"><p>PHP, some people love it. A lot of people hate it. My opinion falls someplace in between. PHP runs a lot of the net. You can't go very far without tripping over a site that has its backbone rooted in this wide spread languages. But its not without its flaws. My experience allows me to easily anticipate this issues, and guide the project around them. </p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">Python</div>
                    <div class="collapsible-body"><p>The other scripting languages turned multipurpose tool, Python is simple, easy to use, and extremely powerful. My got to for quick scripts that have to talk to hardware, its got one of the more different syntax schemes. </p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">Node.JS</div>
                    <div class="collapsible-body"><p>Node.JS its a strange one. Its JavaScript, a languages normally reserved for front end web development. And is almost completely asynchronous. Normally, these two things would not lead to success. But here were are, in a world were Node has successfully made the transition from neat new fringe language to a real contender in the world of web development. Personally, I love the different approach to the normally stagnant call/response webserver.</p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">HMTL</div>
                    <div class="collapsible-body"><p>What can I say about HTML that hasn't already been said. Its the markup that formats the net. But its become so much more than that. With HTML5 we've finally got a languages that starts to tie together all the other parts of front end web development. And those new input types are just so, so, helpful.</p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">JavaScript</div>
                    <div class="collapsible-body"><p>JavaScript gets a bad wrap. Some of it deserved, most of it not. JavaScript lets you do amazing things, but it doesn't give you the safety net of strong types, or easy syntax that a compiled language would. But for modifying a DOM element there is still no better way to do it than with JavaScript. Or, at least with one of its many, MANY libraries. And ES6 is going to be great, once its widely supported. </p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">CSS</div>
                    <div class="collapsible-body"><p>Cascading Style Sheets are a lot like JavaScript in that they get a bad wrap. But in this case, its some what deserved. Support for features can be spotty, the syntax is unwieldy, and even when you get things right a small change can break your design. But in my time as a developer I've come to respect CSS. It can do some amazing things, when user properly. And a finely tuned CSS theme can, and often is, the difference between a professional looking project and something you threw together in an afternoon.</p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">SASS</div>
                    <div class="collapsible-body"><p>Writing CSS is a pain. Using CSS is not. So that's where SASS comes in. A pre-processor or sorts it allows a developer to write an amazing array of styles without having to repeat themselves over and over again. By abstracting the busy work of CSS to variables, functions, and included libraries, it takes the hassle out of creating beautiful CSS. And the hassle out of having to change it later. </p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">SQL</div>
                    <div class="collapsible-body"><p>The great granddaddy of the relational database languages. Regardless of flavor(MySQL, MSSQL, or ProgresSQL), it has been the gold standard for relation databases since the 70s. And with good reason. It allows for data to be manipulated and standardized quickly, for deep queries to be syntactically plain, and its human readable to boot. However, it does fall victim to issues of complexity from time to time.</p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">MongoDB</div>
                    <div class="collapsible-body"><p>MongoDB was the first none relational database I came across as a web developer. And you know what, I fell in love. The idea of handling data points as Documents made great sense when a relational database seemed overkill. And the easy integration with Node.JS and Meteor.JS didn't hurt things ether. </p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">C++</div>
                    <div class="collapsible-body"><p>C++ wasn't the first languages I learned. Its wasn't even the second. It wasn't until well into my college carrier that I was introduce to C++. However, I still find myself going back to C++ to explain issues of Object Oriented Programing and class structure. Its one of the foundations, even more so than C, that I keep coming back to time and time again to explain certain aspects of development.</p></div>
                  </li>
                </ul>
              </div>

              <div id="frameworks" class="section scrollspy betterCarded">
                <h5  class="card-panel blue darken-1 white-text"> Frameworks</h5>
                <p> Languages are great. However, you can only get so far on your own. Frameworks allow developers to share a common code base. They allow for us share the burden of common tasks that aren't covered by our languages. Sometimes they just make handling content easier. Sometimes they take care of almost all the heavy lifting, leaving you to implement the novel functionality that really matters. Below is a short list of those that I've worked with, and a short story about my time with them. </p>
                <ul class="collapsible" data-collapsible="accordion">
                  <li>
                    <div class="collapsible-header">Symphony</div>
                    <div class="collapsible-body"><p>The biggest, and perhaps the most wide spread of the PHP frameworks. Its heavy, but it brings a lot to the table and gets the busy work of setting up site/api/app out of the way so that a developer can focus on functionality. There is a little bloat in the code base, but that's not really so strange for a project of such a scope.</p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">Silex</div>
                    <div class="collapsible-body"><p>Symphony's baby brother. If Symphony is too heavy, but I'm still working with Dev's who are used to living in a Symphony world, Silex is my goto micro-framework. Same routing language, similar database management, but without the overhead that comes with a full fledged Symphony install. Also, you can move code up into a full Symphony project without to much refactoring.</p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">Wordpress</div>
                    <div class="collapsible-body"><p>The most popular CMS out there at the moment. Countless blogs, brochure websites, and social groups run on Wordpress. This has lead the code to become a bit bloated, and made it a near constant target for attack. But, its easy to set up, quick to administer, and simple enough that most end users can handle running it. </p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">Bootstrap</div>
                    <div class="collapsible-body"><p>Twitter's CSS/JS framework. Made popular as the first framework to really support modern responsive design. However, its rise to fame has caused sites and apps built using Bootstrap to have a very "Bootstrappy" feel to them. This can be overcome with careful design and modification of the underlying SASS, but you can't beat the speed for prototyping. Its a great framework, that has gained a well earned following from the web development community.</p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">Angular.JS</div>
                    <div class="collapsible-body"><p>Google's monolithic JavaScript library. Based off the ideas of letting the data speak for itself, Angular runs a wide gambit of very powerful web apps. Personally I like the fact that data is not longer a second class citizen when comes to design in angular. Best suited for single page application, it is currently my front end of choice.</p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">Meteor.js</div>
                    <div class="collapsible-body"><p>The new kid on the block, but rapidly gaining fans in the MEAN development world. The quick development lifecycle, combined with the "install and go" setup has made Meteor one of the fastest growing stacks in recent memory. While there are some questions about issues of scale, only time will tell if these are founded. In my opinion, still the best way to get an app up and running in an afternoon.</p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">Django</div>
                    <div class="collapsible-body"><p>The more popular web framework for python, I've built a few personal projects using Django. Its powerful, but also a little weighty. It brings a lot to the party though, and would still be my suggestion if you want a framework for a web project backed by python.</p></div>
                  </li>
                  <li>
                    <div class="collapsible-header">Flask</div>
                    <div class="collapsible-body"><p>The best micro-framework for Python, hands down. If Django is Symphony, this is Silex. Small, light weight, and simple to use, Flask is a great framework for quick projects or those with a limited scope. Also, the easy to follow documentation is a real plus for people just getting started in the python world of web development.</p></div>
                  </li>
                </ul>
              </div>

              <div id="education" class="section scrollspy">
                <h5 class="card-panel blue darken-1 white-text">Education</h5>
                <!-- <div class="row"> -->
                    <!-- <div class="col s12 m10 offset-m1"> -->
                        <div class="card">
                            <div class="card-image">
                                <img src="images/chopped-seal.png">
                            </div>
                            <div class="card-content">
                                <h5>University of Connecticut College of Liberal Arts</h5>
                                <p>Bachelor of Arts: English 2010</p>
                            </div>
                      </div>
                    <!-- </div> -->
                <!-- </div> -->
              </div>



          </div>
        </div>
      </main>
        <footer class="page-footer blue">
            <div class="container">
                <div class="row">
                    <div class="col l6 s12">
                        <h5 class="white-text">Thank you!</h5>
                        <p class="grey-text text-lighten-4">You scrolled all the way to the bottom of my page. That means you either really like what you saw, or accidentally held down the page down button. Either way, thank you.</p>
                    </div>
                    <div class="col l4 offset-l2 s12">
                        <h5 class="white-text">Contact Me</h5>
                        <ul>
                            <li><spanc class="grey-text text-lighten-3"> Email: </span><a class="grey-text text-lighten-3" href="mailto:Email: rainer.paskiewicz@gmail.com?subject=Job">rainer.paskiewicz@gmail.com</a></li>
                            <li><spanc class="grey-text text-lighten-3">github:</span> <a class="grey-text text-lighten-3" href="https://github.com/LibertyBeta"> LibertyBeta </a></li>
                            <li><spanc class="grey-text text-lighten-3">phone: (203)533-9005</span></li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="footer-copyright">
                <div class="container">
                    © 2015 Copyright Text
                </div>
            </div>
        </footer>
    </body>
  </html>
